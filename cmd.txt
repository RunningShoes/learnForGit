

date：04_17

	git初始化：
		git init

	git查看历史状态：
		git status：查看仓库的状态，可以看看那些文件被修改了
		git diff <file>:查看某个文件具体的修改,加上参数--cached或者--staged表示比较暂存区和仓库分支里面信息的差别。
		git diff HEAD --<filename>:查看该文件工作区与版本库的差别		

	git 提交代码：
		git add <file>     //把文件添加到暂存区（index，stage）
		git commit -m "注释"    //把暂存区的文件提交到主干

date: 04_18:

	查看提交日志：
		git log

	版本回退：
		git reset --hard HEAD^<num>//代表回退数目
		git reset --hard commit_id   //回到当时的版本
		git reflog   //回退时找不到log的方法


date: 04_19:   git保存的内容是修改而不是文件

	一些撤销命令：		
		git reset HEAD <file>  :把暂存区的文件退回工作区,相当于放弃一次git add
		git checkout -- <file>  ：一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
					 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

		git rm <file>          :删除版本库中的file文件
					如果删除了一个文件，可以用git rm <file>,也可以用git checkout -- <file>会退到删除前         

date: 04_20:    
	
	建立远程库以及git推到远程库上面:
		git remote add origin git@server-name:path/repo-name.git；把本地的repository和远程连接起来，远程名字叫orgin
	
	第一次推送：
		git push -u origin master  ：第一次推送，后续可以不加-u
	从版本库拉分支：
		git pull  :拉分支与当前代码合并
		git pull origin master:master :参数分别是远程主机名 远程分支名字 本地分支名字(本地分支名字可以省略)

	从远程库拉分支：先建立一个远程库，选择Initialize this repository with a README，然后git clone git@github.com:RunningShoes/learningForGit.git



date: 04_22:  none

date: 04_23:  

date: 04_28:	提交文件夹(第一册提交时，文件夹里面一定要有文件存在)
		
		git add .                   :提交全部的文件夹
		git add /file document name :提交某个文件夹下面的内容

date: 05_08:   分支管理：

		git checkout -b dev         :新建一个dev的分支,同时切换到该分支上
					     相当于  git branch dev     创建分支
						     git checkout dev   切换分支
		
		git merge dev               :将dev分支的内容合并到当前的分支上来
		git branch -d dev	    :删除当前分支.

		git log --graph             :查看分支图表。

		合并分支时可能导致冲突，这个时候需要解决冲突在进行合并，此时的合并方式是fast-forward，快速合并。



 	      分支管理策略：通常master是最稳定的分支，其他的工作内容通常存在于其他的分支上。
		
	       前面所说的合并值得是fast-forward快速合并，并不新建一个commit id，此时不会丢掉分支的信息

		git merge --no-ff dev      :合并dev分支到当前的分支里面

	      
	      创建bug分支：如果需要修改bug，可以通过git stash把暂停工作区的内容先存下来


	      修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
	      当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

		git stash                  :把工作区的内容存起来
		git stash list             :查看stash里面存储的内容
		git stash apply            :恢复stash的内容，但是不删除stash里面的内容
		git stash drop  	   :stash apply后删除stash里面的内容
		git stash pop		   :git stash apply  +  git stash pop
		git stash apply stash@{0}  :恢复指定stash
	     
	        git branch -d branchname   :删除分支
		git branch -D branchname   :强制删除该条分支

date: 05_09:   
		git remote -v              :查看远程分支的信息
		
		git branch --set-upstream-to  origin/<branch-name>   <branch-name>
					   :把本地分支和远程分支链接起来

		git push origin 当前分支的name
					   :把当前分支推送到远程，并创建同名的分支
		git push origin --delete <remote branch name>
					   :把删除该条远程分支


	     git加标签的方法：标签-tag，同commit id联系在一起

		git tag <tag name>         :把标签打在最新的commit id上，-a 可以指定标签名字，-m可以加创建文字说明
		git tag   		   :显示所有的标签
		git show <tag name>	   :查看该条tag的具体信息
		
		git tag -d <tag name>	   :删除一个本地标签
		git push origin :refs/tags/<tagname>
					   :删除一个远程标签
		git push origin --tags	   :把本地所有的标签提交到远程
		git push origin <tag name> :提交本地该标签到远程
		
	     git加标签到某一个commit id：

		git log --pretty=oneline --abbrev-commit 
					   :显示出commit id的log
		git tag <tag name> commitid 
					   :在该commitid处打上标签


	    git上学习别人的库的方法：
		1.点击 fork
		2.git@github.com:RunningShoes/bootstrap.git	


	    git上的配置：每个仓库的Git配置文件都放在.git/config文件中
		
		--global表示全局配置，对当前用户生效，不加的话只对当前的仓库生效

		忽略一些特殊文件，包含.ignore文件就行，可以去https://github.com/github/gitignore找
		git config --global color.ui true
					   :显示颜色
		git config --global alias.co checkout     co代替checkout
		git config --global alias.ci commit	  ci代替commit
		git config --global alias.br branch	  br代替branch
					   :缩写命令行，简写	
